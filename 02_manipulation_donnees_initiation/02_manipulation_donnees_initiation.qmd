---
format:
  revealjs:
    theme: custom.scss
    fontsize: 1.8em
editor: visual
title-slide-attributes: 
  data-background-image: title.png
  data-background-opacity: 50%
---

![](img/title.png){fig-align="center"}

## 

<br>

![](img/workflow_01.png){fig-align="center"}

## 

<br>

![](img/workflow_02.png){fig-align="center"}

## 

<br>

![](img/workflow_03.png){fig-align="center"}

## 

<br>

![](img/workflow_04.png){fig-align="center"}

# Installer et charger le {tidyverse}

## Installer le {tidyverse}

<br>

-   Installer tous les packages du {tidyverse} :

```{r, echo=TRUE, eval=FALSE}
install.packages("tidyverse")  
```

<br>

-   Installer uniquement les packages nécessaires :

```{r, echo=TRUE, eval=FALSE}
install.packages("readr")
install.packages("dplyr")
install.packages("tidyr")
```

## Charger le {tidyverse}

<br>

-   Charger tous les packages du {tidyverse}

```{r, echo=TRUE, eval=FALSE}
library(tidyverse)
```

<br>

-   Charger uniquement les packages nécessaires

```{r, echo=TRUE, eval=FALSE}
library(readr)
library(dplyr)
library(tidyr)
```

## Les conflits

<br>

Quand vous chargez l'ensemble du {tidyverse}, un message s'affiche dans la console :

```{r, echo=TRUE, eval=TRUE, message=TRUE, warning=FALSE}
library(tidyverse)
```

<br>

La section **Conflicts** vous indique que des fonctions portant le **même nom** existent dans au moins **un autre package**.

# Le jeu de données *penguins*

## Le jeu de données *penguins*

<br>

-   Données collectées et publiées par [Dr Kristen Gorman](https://www.uaf.edu/cfos/people/faculty/detail/kristen-gorman.php) lors d'une étude menée dans la [Palmer Station](https://pallter.marine.rutgers.edu/) en Antarctique, appartenant à la [LTER](https://lternet.edu/) (Long Term Ecological Research Network).

-   Mesure de différents paramètres (par exemple la longueur des ailes, la masse corporelle) chez **342 individus** appartenant à **trois espèces** de pingouins vivant sur **trois îles** de l'archipel Palmer.

-   Deux jeux de données :

    -   données brutes (`penguins_raw`)

    -   **données nettoyées (`penguins`)**

-   Données disponibles dans un package R : [`{palmerpenguins}`](https://allisonhorst.github.io/palmerpenguins/).

## 

![](img/title_readr_read.png){fig-align="center"}

## Importer les données

<br>

#### Avec le package {readr}

-   Directement à partir de la page web :

```{r, echo=TRUE, eval=FALSE}
url <- "https://raw.githubusercontent.com/allisonhorst/palmerpenguins/main/inst/extdata/penguins.csv"
penguins <- read_csv(url)
```

-   En important le fichier `penguins.csv` préalablement téléchargé :

```{r, echo=TRUE, eval=FALSE}
penguins <- read_csv("02-data_raw/penguins.csv")
```

<br>

#### Avec le package {palmerpenguins}

```{r, echo=TRUE, eval=FALSE}
install.packages("palmerpenguins")
penguins <- palmerpenguins::penguins
```

```{r, echo=FALSE, eval=TRUE}
penguins <- palmerpenguins::penguins
```

## 

![](img/title_dplyr_glimpse.png){fig-align="center"}

## Explorer les données

<br>

La fonction `glimpse()` permet d'afficher la structure et le contenu de données :

<br>

```{r, echo=TRUE, eval=TRUE}
glimpse(penguins)
```

## 

![](img/title_dplyr_data_wrangling.png){fig-align="center"}

## Le package {dplyr}

<br>

-   Contient un ensemble de fonctions utiles à la **transformation** et à la **synthèse** de données

<br>

-   Ces fonctions, comparées aux fonctions R basiques :

    -   ont une syntaxe plus cohérente

    -   ont un nombre limité d'options

    -   retournent toujours un data.frame (un tibble plus précisément)

    -   utilisent des méthodes de stockage de données efficaces

    -   peuvent être utilisées pour des bases de données et des data tables

## Les principaux verbes de {dplyr}

<br>

| Verbe (fonction)               | Explication                         |
|--------------------------------|-------------------------------------|
| `select()`                     | sélectionner des colonnes           |
| `filter()`                     | sélectionner des lignes             |
| `arrange()`                    | trier des données                   |
| `mutate()`                     | créer de nouvelles variables        |
| `summarise()` ou `summarize()` | synthétiser des variables           |
| `group_by()`                   | créer des sous-ensembles de données |

## La syntaxe cohérente de {dplyr}

<br>

Toutes les fonctions ont les mêmes arguments principaux :

![](img/dplyr_syntax.png)

-   Le premier argument précise **vos données**

-   Les arguments suivants indiquent **ce que vous faites de ces données**, en utilisant les **noms des variables**

## 

![](img/title_dplyr_select.png)

## Sélectionner des colonnes

<br>

#### Conserver une colonne

<br>

```{r, echo=TRUE, eval=TRUE}
select(penguins, species)
```

## Sélectionner des colonnes

<br>

#### Supprimer une colonne

<br>

```{r, echo=TRUE, eval=TRUE}
select(penguins, -species)
```

## Sélectionner des colonnes

<br>

#### Conserver plusieurs colonnes

<br>

```{r, echo=TRUE, eval=TRUE}
select(penguins, species, island, bill_length_mm)
```
