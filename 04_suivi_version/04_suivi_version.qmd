---
format:
  revealjs:
    theme: custom.scss
    fontsize: 1.8em
editor: visual
title-slide-attributes: 
  data-background-image: title.png
  data-background-opacity: 50%
---

![](img/title.png)

## Les ateliers codons

<br>

-   Des **créneaux réguliers** pour **découvrir** et **progresser**

-   Deux parcours : **initiation** et **perfectionnement**

-   Une **équipe d'animation**

-   Des **supports** disponibles en ligne : [ateliers-codons.netlify.app/](https://ateliers-codons.netlify.app/)

<br>

#### Sources pour cet atelier :

<br>

-   [Happy Git with R](https://happygitwithr.com/)

-   [Pro Git](https://git-scm.com/book/fr/v2)

-   [Git tutorial for beginners: learn Git in 1 hour](https://www.youtube.com/watch?v=8JJ101D3knE&t=436s)

# Gestionnaire de version

## Gestionnaire de version

<br>

> Un gestionnaire de version est un système qui **enregistre l'évolution d'un fichier ou d'un ensemble de fichiers au cours du temps** de manière à ce qu'on puisse **rappeler une version antérieure** d'un fichier à tout moment.
>
> *Pro Git*

## Gestionnaire de version

<br>

![](img/vcs_simple.png)

## Sans gestion de version ...

<br>

![](img/no_vcs.png){fig-align="center"}

## Système de gestion de version

<br>

Un **système de gestion de version (VCS)** permet de :

<br>

-   ramener un fichier à un état précédent

-   ramener le projet complet à un état précédent

-   visualiser les changements au cours du temps

-   voir qui a modifié quelquechose qui pourrait poser un problème

-   voir qui a introduit un problème et quand

-   ...

## VCS centralisé vs. VCS distribué

<br>

![](img/centralised_vs_distributed_vcs.png){fig-align="center"}

## Pourquoi utiliser Git ?

<br>

-   Gratuit

-   Open Source

-   Très rapide

-   Evolutif

-   Création et fusion de branches

## Comment utiliser Git ?

<br>

-   En ligne de commande

-   A l'aide d'un Environnement de Développement Intégré (IDE)

    -   RStudio

    -   VS Code

-   A l'aide d'une Interface Utilisateur Graphique (GUI)

    -   Git Kraken

    -   Source Tree

# Installer Git

## Vérifier si Git est déjà installé

<br>

Ouvrez un terminal :

-   **macOS** : `Cmd` + `Espace` et tapez `terminal`

-   **Windows** : dans la barre de recherche, tapez `cmd`

<br>

Vous pouvez également ouvrir un terminal directement dans **RStudio** :

-   `Tools` \> `Teminal` \> `New Terminal`

-   `Alt` + `Maj` + `R`

-   Cliquez sur l'onglet Teminal

![](img/rstudio_terminal.png)

## Vérifier si Git est déjà installé

<br>

Dans le terminal, tapez les commandes suivantes :

<br>

-   Afficher l'emplacement de Git sur votre ordinateur :

`which git`

<br>

-   Afficher la version de Git installée sur votre ordinateur :

`git --version`

## Installer Git

<br>

![](img/download_git.png)

# Configurer Git

## Configurer Git

<br>

Quand vous utilisez Git pour la première fois, il vous faudra renseigner quelques informations :

<br>

-   Nom

-   E-mail

-   Editeur de texte par défaut

-   Fin de ligne

## Configurer Git

<br>

La configuration de Git peut se faire à trois niveaux :

<br>

-   **System** : tous les utilisateurs

-   **Global** : tous les répertoires de l'utilisateur

-   **Local** : répertoire courant

## Configurer Git

<br>

![](img/git_config.png)

## Configurer Git - nom et e-mail

<br>

Tapez les commandes suivantes dans le terminal :

`git config --global user.name "Prenom Nom"`

`git config --global user.email prenom.nom@mail.com`

## Configurer Git - éditeur de texte par défaut

<br>

Pour configurer l'éditeur de texte par défaut, copiez le chemin d'accès vers l'éditeur de votre choix (par ex. *Notepad ++*)

![](img/path_editor.png)

<br>

Tapez ensuite la commande suivante (attention aux guillemets) :

`git config --global core.editor '"C:\Program Files\Notepad++\notepad++.exe"'`

## Configurer Git

<br>

Vous pouvez ouvrir le fichier de configuration de Git (`.gitconfig`) :

<br>

-   Dans le terminal

    `git config --global --list`

-   Dans l'éditeur de texte

    `git config --global -e`

## Configurer Git - fin de ligne

<br>

![](img/crlf.png)
