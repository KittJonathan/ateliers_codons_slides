---
format:
  revealjs:
    theme: custom.scss
    fontsize: 1.8em
editor: visual
title-slide-attributes: 
  data-background-image: title.png
  data-background-opacity: 50%
---

![](img/title.png)

## Les ateliers codons

<br>

-   Des **créneaux réguliers** pour **découvrir** et **progresser**

-   Deux parcours : **initiation** et **perfectionnement**

-   Une **équipe d'animation**

-   Des **supports** disponibles en ligne : [ateliers-codons.netlify.app/](https://ateliers-codons.netlify.app/)

<br>

#### Sources pour cet atelier :

<br>

-   [Happy Git with R](https://happygitwithr.com/)

-   [Pro Git](https://git-scm.com/book/fr/v2)

-   [Git tutorial for beginners: learn Git in 1 hour](https://www.youtube.com/watch?v=8JJ101D3knE&t=436s)

# Gestionnaire de version

## Gestionnaire de version

<br>

> Un gestionnaire de version est un système qui **enregistre l'évolution d'un fichier ou d'un ensemble de fichiers au cours du temps** de manière à ce qu'on puisse **rappeler une version antérieure** d'un fichier à tout moment.
>
> *Pro Git*

## Gestionnaire de version

<br>

![](img/vcs_simple.png)

## Sans gestion de version ...

<br>

![](img/no_vcs.png){fig-align="center"}

## Système de gestion de version

<br>

Un **système de gestion de version (VCS)** permet de :

<br>

-   ramener un fichier à un état précédent

-   ramener le projet complet à un état précédent

-   visualiser les changements au cours du temps

-   voir qui a modifié quelquechose qui pourrait poser un problème

-   voir qui a introduit un problème et quand

-   ...

## VCS centralisé vs. VCS distribué

<br>

![](img/centralised_vs_distributed_vcs.png){fig-align="center"}

## Pourquoi utiliser Git ?

<br>

-   Gratuit

-   Open Source

-   Très rapide

-   Evolutif

-   Création et fusion de branches

## Comment utiliser Git ?

<br>

-   En ligne de commande

-   A l'aide d'un Environnement de Développement Intégré (IDE)

    -   RStudio

    -   VS Code

-   A l'aide d'une Interface Utilisateur Graphique (GUI)

    -   Git Kraken

    -   Source Tree

# Installer Git

## Vérifier si Git est déjà installé

<br>

Ouvrez un terminal :

-   **macOS** : `Cmd` + `Espace` et tapez `terminal`

-   **Windows** : dans la barre de recherche, tapez `cmd`

<br>

Vous pouvez également ouvrir un terminal directement dans **RStudio** :

-   `Tools` \> `Teminal` \> `New Terminal`

-   `Alt` + `Maj` + `R`

-   Cliquez sur l'onglet Teminal

![](img/rstudio_terminal.png)

## Vérifier si Git est déjà installé

<br>

Dans le terminal, tapez les commandes suivantes :

<br>

-   Afficher l'emplacement de Git sur votre ordinateur :

`which git`

<br>

-   Afficher la version de Git installée sur votre ordinateur :

`git --version`

## Installer Git

<br>

![](img/download_git.png)

# Configurer Git

## Configurer Git

<br>

Quand vous utilisez Git pour la première fois, il vous faudra renseigner quelques informations :

<br>

-   Nom

-   E-mail

-   Editeur de texte par défaut

-   Fin de ligne

## Configurer Git

<br>

La configuration de Git peut se faire à trois niveaux :

<br>

-   **System** : tous les utilisateurs

-   **Global** : tous les répertoires de l'utilisateur

-   **Local** : répertoire courant

## Configurer Git

<br>

![](img/git_config.png)

## Configurer Git - nom et e-mail

<br>

Tapez les commandes suivantes dans le terminal :

`git config --global user.name "Prenom Nom"`

`git config --global user.email prenom.nom@mail.com`

## Configurer Git - éditeur de texte par défaut

<br>

Pour configurer l'éditeur de texte par défaut, copiez le chemin d'accès vers l'éditeur de votre choix (par ex. *Notepad ++*)

![](img/path_editor.png)

<br>

Tapez ensuite la commande suivante (attention aux guillemets) :

`git config --global core.editor '"C:\Program Files\Notepad++\notepad++.exe"'`

## Configurer Git

<br>

Vous pouvez ouvrir le fichier de configuration de Git (`.gitconfig`) :

<br>

-   Dans le terminal

    `git config --global --list`

-   Dans l'éditeur de texte

    `git config --global -e`

## Configurer Git - fin de ligne

<br>

![](img/crlf.png)

## Configurer Git - fin de ligne

<br>

![](img/core_autocrlf.png)

<br>

|               |                                      |
|---------------|--------------------------------------|
| Windows       | `git config –global auto.crlf true`  |
| macOS / Linux | `git config –global auto.crlf input` |

# Obtenir de l'aide

## Obtenir de l'aide

<br>

-   Dans un moteur de recherche, tapez `git config doc`

    ::: columns
    ::: {.column width="50%"}
    ![](img/git_config_help_1.png)
    :::

    ::: {.column width="50%"}
    ![](img/git_config_help_2.png)
    :::
    :::

-   Dans le terminal, tapez `git config --help`

-   Pour une version synthétique de l'aide, utilisez `git config -h`

# Initialiser un dépôt Git

## Initialiser un dépôt Git

<br>

-   Naviguez jusqu'à l'emplacement sur votre ordinateur où vous souhaitez créer un nouveau répertoire

    -   Utilisez la commande `cd` (change directory) pour naviguer

    -   Le répertoire actuel est noté "point" `.`

    -   Pour revenir d'un niveau en arrière, utilisez `cd ..`

-   Créez un nouveau répertoire : `mkdir tuto_git`

    -   `mkdir` : make directory

-   Placez-vous dans ce nouveau répertoire : `cd tuto_git`

-   Initialisez un dépôt Git dans ce répertoire : `git init`

## Initialiser un dépôt Git

<br>

![](img/git_init.png)

<br>

Dans le répertoire `tuto_git`, un **répertoire caché .`git`** a été créé.

## Initialiser un dépôt Git

<br>

Pour afficher le contenu d'un répertoire, utilisez la commande `ls` (list) :

-   cette commande n'affiche pas les fichiers ou dossiers cachés

-   utilisez `ls -a` (all) pour afficher tout le contenu du répertoire

![](img/git_init_2.png){width="200"}

<br>

Vous pouvez ouvrir ce répertoire `.git` à l'aide de la commande `open .git`.

## Initialiser un dépôt Git

<br>

Le répertoire caché `.git` contient toutes les informations nécessaires à Git pour suivre l'historique de votre dépôt.

Si vous changez d'avis et souhaitez supprimer ce répertoire `.git`, utilisez la commande suivante :

![](img/rm_rf_git.png)

# Le workflow Git

## Le workflow Git

<br>

![](img/git_basic_workflow.png)

## Créer des fichiers

<br>

::: {.callout-note appearance="simple" icon="false"}
`echo hello > file1.txt`

`echo hello > file2.txt`
:::

<br>

![](img/workflow_1.png)

## Afficher l'état du dépôt

<br>

Pour afficher l'état du dépôt, utilisez la commande suivante :

`git status`

<br>

![](img/workflow_2.png)

## Ajouter des fichiers à l'index

<br>

La commande `git add` permet d'ajouter des fichiers à la zone d'index :

<br>

-   en nommant les fichiers un par un :

    `git add fichier1.txt fichier2.txt`

-   en utilisant un motif

    `git add *.txt`

-   en ajoutant tous les fichiers du répertoire

    `git add .`

## Ajouter des fichiers à l'index

<br>

::: {.callout-note appearance="simple" icon="false"}
`git add file1.txt file2.txt`
:::

<br>

![](img/workflow_3.png)

## Ajouter des fichiers à l'index

<br>

![](img/workflow_4.png)

## Modifier un fichier

<br>

::: {.callout-note appearance="simple" icon="false"}
`echo world >> file1.txt`
:::

<br>

![](img/workflow_5.png)

## Modifier un fichier

<br>

![](img/workflow_6.png)

## Modifier un fichier

<br>

::: {.callout-note appearance="simple" icon="false"}
`git add file1.txt`
:::

<br>

![](img/workflow_7.png)

## Modifier un fichier

<br>

![](img/workflow_8.png)

## Sauvegarder un instantané

<br>

Pour créer un instanté du répertoire dans l'état actuel, utilisez la commande suivante :

<br>

![](img/git_commit.png)

<br>

Si vous avez besoin de taper un message plus long, la commande `git commit` ouvrira votre éditeur de texte.

## Sauvegarder un instantané

<br>

::: {.callout-note appearance="simple" icon="false"}
git commit -m "commit initial"
:::

<br>

![](img/workflow_9.png)

## Sauvegarder un instantané

<br>

![](img/workflow_10png.png)

## Sauvegarder un instantané

<br>

![](img/workflow_11.png)

## Sauvegarder un instantané

<br>

![](img/workflow_12.png)

## Sauvegarder un instantané

<br>

::: {.callout-note appearance="simple" icon="false"}
git commit -m "commit initial"
:::

<br>

![](img/workflow_13.png)

## Quand faire un commit ?

<br>

![](img/commit_size.png)

<br>

**Un commit n'est pas un `Ctrl + S` !**

## Que mettre dans un commit ?

<br>

Un même commit devrait contenir des modifications ou corrections qui vont ensemble.

<br>

![](img/commit_content.png)

## Comment décrire un commit ?

<br>

-   Etre le plus explicite possible

-   Choisir une convention et s'y tenir

<br>

![XKCD](img/git_commit_message.png)

## Commit direct

<br>

Il est possible de faire un commit sans passer par l'étape d'ajout dans la zone d'index.

-   La zone d'index permet de vérifier ce que l'on fait

-   A éviter à moins d'être vraiment certain !

<br>

![](img/git_commit_am.png)

## Commit direct

<br>

::: {.callout-note appearance="simple" icon="false"}
`echo test >> file1.txt`

`git commit -am "correction de bug"`
:::

<br>

![](img/git_commit_am_2.png)

## Supprimer un fichier

<br>

La commande `rm` permet de supprimer un fichier du répertoire.

`rm file2.txt`

<br>

La commande `ls` permet de faire la liste des fichiers présents **dans le répertoire**.

Pour faire la liste des fichiers présents dans la **zone d'index**, utilisez `git ls-files`.

<br>

![](img/ls_files.png)

Le fichier supprimé est **toujours présent dans la zone d'index**.

## Supprimer un fichier

<br>

::: {.callout-note appearance="simple" icon="false"}
`rm file2.txt`
:::

<br>

![](img/workflow_14.png)

## Supprimer un fichier

<br>

Pour retirer de la zone d'index un fichier supprimé du répertoire, il faut procéder de la même façon que pour un commit "classique" :

`git add file2.txt`

<br>

La commande `git ls-files` montre que le fichier n'est plus présent dans la zone d'index.

## Supprimer un fichier

<br>

![](img/workflow_15.png)

<br>

Pour que cette modification soit effective, effectuons un comit :

`git commit -m "suppression d'un fichier inutile"`

## Supprimer un fichier

<br>

Pour supprimer un fichier à la fois du répertoire et de la zone d'index, utilisez la commande `git rm`.

::: {.callout-note appearance="simple" icon="false"}
`echo hello > file3.txt`

`git add file3.txt`

`git commit -m "creation d'un nouveau fichier"`
:::

<br>

![](img/workflow_16.png)

## Supprimer un fichier

<br>

Pour supprimer un fichier à la fois du répertoire et de la zone d'index, utilisez la commande `git rm`.

::: {.callout-note appearance="simple" icon="false"}
`git rm file3.txt`

`git commit -am "suppression d'un fichier ajoute par erreur"`
:::

<br>

![](img/workflow_17.png)
