---
format:
  revealjs:
    theme: custom.scss
    fontsize: 1.8em
editor: visual
title-slide-attributes: 
  data-background-image: title.png
  data-background-opacity: 50%
---

![](img/title.png)

## Les ateliers codons

<br>

-   Des **créneaux réguliers** pour **découvrir** et **progresser**

-   Deux parcours : **initiation** et **perfectionnement**

-   Une **équipe d'animation**

-   Des **supports** disponibles en ligne : [ateliers-codons.netlify.app/](https://ateliers-codons.netlify.app/)

<br>

#### Sources pour cet atelier :

<br>

-   [Happy Git with R](https://happygitwithr.com/)

-   [Pro Git](https://git-scm.com/book/fr/v2)

-   [Git tutorial for beginners: learn Git in 1 hour](https://www.youtube.com/watch?v=8JJ101D3knE&t=436s)

# Gestionnaire de version

## Gestionnaire de version

<br>

> Un gestionnaire de version est un système qui **enregistre l'évolution d'un fichier ou d'un ensemble de fichiers au cours du temps** de manière à ce qu'on puisse **rappeler une version antérieure** d'un fichier à tout moment.
>
> *Pro Git*

## Gestionnaire de version

<br>

![](img/vcs_simple.png)

## Sans gestion de version ...

<br>

![](img/no_vcs.png){fig-align="center"}

## Système de gestion de version

<br>

Un **système de gestion de version (VCS)** permet de :

<br>

-   ramener un fichier à un état précédent

-   ramener le projet complet à un état précédent

-   visualiser les changements au cours du temps

-   voir qui a modifié quelquechose qui pourrait poser un problème

-   voir qui a introduit un problème et quand

-   ...

## VCS centralisé vs. VCS distribué

<br>

![](img/centralised_vs_distributed_vcs.png){fig-align="center"}

## Pourquoi utiliser Git ?

<br>

-   Gratuit

-   Open Source

-   Très rapide

-   Evolutif

-   Création et fusion de branches

## Comment utiliser Git ?

<br>

-   En ligne de commande

-   A l'aide d'un Environnement de Développement Intégré (IDE)

    -   RStudio

    -   VS Code

-   A l'aide d'une Interface Utilisateur Graphique (GUI)

    -   Git Kraken

    -   Source Tree

# Installer Git

## Vérifier si Git est déjà installé

<br>

Ouvrez un terminal :

-   **macOS** : `Cmd` + `Espace` et tapez `terminal`

-   **Windows** : dans la barre de recherche, tapez `cmd`

<br>

Vous pouvez également ouvrir un terminal directement dans **RStudio** :

-   `Tools` \> `Teminal` \> `New Terminal`

-   `Alt` + `Maj` + `R`

-   Cliquez sur l'onglet Teminal

![](img/rstudio_terminal.png)

## Vérifier si Git est déjà installé

<br>

Si Git est installé, vous pouvez utiliser **Git Bash** :

![](img/git_bash_rstudio.png)

## Vérifier si Git est déjà installé

<br>

Dans le terminal, tapez les commandes suivantes :

<br>

-   Afficher l'emplacement de Git sur votre ordinateur :

`which git`

<br>

-   Afficher la version de Git installée sur votre ordinateur :

`git --version`

`git -v`

## Installer Git

<br>

![](img/download_git.png)

# Configurer Git

## Configurer Git

<br>

Il est possible de configurer Git pour optimiser son utilisation.

Pour le moment, nous allons renseigner les informations suivantes :

-   nom d'utilisateur

-   e-mail d'utilisateur

-   éditeur de texte par défaut

<br>

La configuration de Git s'effectue dans un fichier caché nommé **`.gitconfig`**, placé à la racine de votre répertoire d'utilisateur (votre "home").

## Configurer Git

<br>

La configuration de Git peut se faire à trois niveaux :

<br>

-   **System** : tous les utilisateurs

-   **Global** : tous les répertoires de l'utilisateur

-   **Local** : répertoire courant

## Configurer Git

<br>

![](img/git_config.png)

## Configurer Git - nom et e-mail

<br>

Tapez les commandes suivantes dans le terminal :

`git config --global user.name "Prenom Nom"`

`git config --global user.email prenom.nom@mail.com`

## Configurer Git - éditeur de texte par défaut

<br>

Pour configurer l'éditeur de texte par défaut, copiez le chemin d'accès vers l'éditeur de votre choix (par ex. *Notepad ++*)

![](img/path_editor.png)

<br>

Tapez ensuite la commande suivante (**attention aux guillemets**) :

`git config --global core.editor '"C:\Program Files\Notepad++\notepad++.exe"'`

## Configurer Git

<br>

Vous pouvez ouvrir le fichier de configuration de Git (`.gitconfig`) :

<br>

-   Dans le terminal

    `git config --global --list`

-   Dans l'éditeur de texte

    `git config --global -e`

## Configurer Git

<br>

![](img/git_config_example.png)

# Obtenir de l'aide

## Obtenir de l'aide

<br>

-   Dans un moteur de recherche, tapez `git config doc`

    ::: columns
    ::: {.column width="50%"}
    ![](img/git_config_help_1.png)
    :::

    ::: {.column width="50%"}
    ![](img/git_config_help_2.png)
    :::
    :::

-   Dans le terminal, tapez `git config --help`

-   Pour une version synthétique de l'aide, utilisez `git config -h`

# Initialiser un dépôt Git

## Initialiser un dépôt Git

<br>

-   Naviguez jusqu'à l'emplacement sur votre ordinateur où vous souhaitez créer un nouveau répertoire

    -   Utilisez la commande `cd` (change directory) pour naviguer

    -   Le répertoire actuel est noté "point" `.`

    -   Pour revenir d'un niveau en arrière, utilisez `cd ..`

-   Créez un nouveau répertoire : `mkdir tuto_git`

    -   `mkdir` : make directory

-   Placez-vous dans ce nouveau répertoire : `cd tuto_git`

-   Initialisez un dépôt Git dans ce répertoire : `git init`

## Initialiser un dépôt Git

<br>

![](img/git_init_3.png)

<br>

Dans le répertoire `tuto_git`, un **répertoire caché .`git`** a été créé.

## Initialiser un dépôt Git

<br>

Pour afficher le contenu d'un répertoire, utilisez la commande `ls` (list) :

-   cette commande n'affiche pas les fichiers ou dossiers cachés

-   utilisez `ls -a` (all) pour afficher tout le contenu du répertoire

-   utilisez `ls -la` (list all) pour afficher tout le contenu sous forme de liste

![](img/git_init_4.png)

<br>

Vous pouvez ouvrir ce répertoire `.git` à l'aide de la commande `open .git`.

## Initialiser un dépôt Git

<br>

Le répertoire caché `.git` contient toutes les informations nécessaires à Git pour suivre l'historique de votre dépôt.

Si vous changez d'avis et souhaitez supprimer ce répertoire `.git`, utilisez la commande suivante :

![](img/rm_rf_git.png)

# Créer un fichier

## Créer un fichier

<br>

La commande `echo` permet d'afficher du texte.

<br>

Pour créer un fichier et ajouter du contenu, combinez la commande `echo` avec l'opérateur `>`.

<br>

![](img/create_file_01.png){fig-align="left"}

## Créer un fichier

<br>

La commande `cat` permet d'afficher le contenu d'un fichier.

<br>

Les commandes `head` et `tail` permettent d'afficher les premières lignes ou les dernières lignes d'un fichier.

<br>

![](img/create_file_02.png){fig-align="left"}

# Le workflow Git

## Les trois zones

<br>

![](img/git_workflow_00.png)

## Afficher l'état du répertoire

<br>

La commande `git status` permet d'afficher l'état actuel du répertoire de travail :

`<br>`

![](img/git_status_01.png){fig-align="left"}

## Afficher l'état du répertoire

<br>

![](img/workflow_git_01.png){fig-align="left"}

## Ajouter des fichiers à la zone d'index

<br>

La commande `git add` permet d'ajouter des fichiers à la zone d'index :

<br>

-   en nommant les fichiers un par un :

    `git add file1.txt`

-   en utilisant un motif

    `git add *.txt`

-   en ajoutant tous les fichiers du répertoire de travail

    `git add .`

## Ajouter des fichiers à la zone d'index

<br>

`git add file1.txt`

<br>

![](img/workflow_git_02.png){fig-align="left"}

## Ajouter des fichiers à la zone d'index

<br>

`git add file1.txt`

<br>

![](img/workflow_git_03.png){fig-align="left"}

## Configurer Git - fin de ligne

<br>

![](img/crlf.png)

## Configurer Git - fin de ligne

<br>

![](img/core_autocrlf.png)

|               |                                       |
|---------------|---------------------------------------|
| Windows       | `git config --global auto.crlf true`  |
| macOS / Linux | `git config --global auto.crlf input` |

## Modifier un fichier

<br>

L'opérateur `>>` permet d'ajouter une ligne dans un fichier existant :

`echo world >> file1.txt`

<br>

![](img/workflow_git_04.png){fig-align="left"}

## Modifier un fichier

<br>

![](img/workflow_git_05.png){fig-align="left"}

## Modifier un fichier 

<br>

La commande git diff permet de comparer le répertoire de travail à la zone d'index :

`git diff`

<br>

![](img/history_19.png){fig-align="left"}

## Modifier un fichier

<br>

`git add file1.txt`

<br>

![](img/workflow_git_06.png){fig-align="left"}

## Modifier un fichier

<br>

![](img/workflow_git_07.png){fig-align="left"}

## Sauvegarder un instantané de la zone d'index

<br>

Pour créer un instantané de la zone d'index, utilisez la commande suivante :

<br>

![](img/git_commit.png)

<br>

Si vous avez besoin de taper un message plus long, la commande `git commit` ouvrira votre éditeur de texte.

## Sauvegarder un instantané de la zone d'index

<br>

`git commit -m "creation du fichier file1.txt"`

<br>

![](img/workflow_git_08.png){fig-align="left"}

## Sauvegarder un instantané de la zone d'index

<br>

![](img/workflow_git_09.png){fig-align="left"}

## Sauvegarder un instantané de la zone d'index

<br>

![](img/workflow_git_10.png){fig-align="left"}

## Sauvegarder un instantané de la zone d'index

<br>

![](img/workflow_git_11.png){fig-align="left"}

<br>

-   100644 : fichier "normal"

-   100755 : fichier exécutable

-   120000 : lien symbolique

## Sauvegarder un instantané de la zone d'index

<br>

`git commit -m "creation du fichier file1.txt"`

<br>

![](img/workflow_git_12.png){fig-align="left"}

## Les commits - quand ?

<br>

#### Un commit n'est pas un Ctrl + S !

-   Un commit contient des **modifications significatives** que l'on souhaite sauvegarder

-   Trouver le **juste milieu** entre un commit "trop petit" et un commit "trop grand"

![](img/commit_size.png)

## Les commits - quoi ?

<br>

#### Ne pas mettre dans un même commit des mofications qui n'ont rien à voir les unes avec les autres.

-   Un des principaux intérêts de Git est de pouvoir revenir à un état antérieur d'un fichier.

-   Si les modifications concernent différentes parties de votre projet, utilisez des commits différents (intérêt de la zone d'index)

<br>

![](img/commit_content.png)

## Les commits - comment ?

<br>

#### Le message associé à un commit doit décrire ce qui a été fait et pourquoi.

-   Etre le plus explicite possible

-   Choisir une convention et s'y tenir

<br>

![XKCD](img/git_commit_message.png)

## Commit "direct"

<br>

Il est possible (mais **pas toujours souhaitable**) de faire un commit sans passer par l'étape d'ajout dans la zone d'index.

<br>

![](img/git_commit_am.png)

Cette commande fonctionne pour les fichiers qui sont **déjà suivis** par Git (les fichiers qui existent dans la zone d'index).

## Commit "direct"

<br>

`echo test >> file1.txt`

<br>

![](img/workflow_git_13.png){fig-align="left"}

## Commit "direct"

<br>

`git commit -am "ajout d'une ligne dans file1.txt"`

<br>

![](img/workflow_git_14.png){fig-align="left"}

## Supprimer un fichier

<br>

La commande `touch` permet de créer un fichier vide :

<br>

`touch file2.txt`

<br>

![](img/workflow_git_15.png){fig-align="left"}

## Supprimer un fichier

<br>

`git add .`

<br>

![](img/workflow_git_16.png){fig-align="left"}

## Supprimer un fichier

<br>

La commande `git diff --staged` (ou `git diff --cached`) permet de comparer la zone d'index au dernier commit :

<br>

![](img/git_diff_01.png){fig-align="left"}

## Supprimer un fichier

<br>

`git commit -m "ajout du fichier vide file2.txt"`

<br>

![](img/workflow_git_17.png){fig-align="left"}

## Supprimer un fichier

<br>

La commande `rm` permet de supprimer un fichier du répertoire de travail.

`rm file2.txt`

<br>

La commande `ls` permet de faire la liste des fichiers présents **dans le répertoire**.

Pour lister les fichiers présents dans la **zone d'index**, utilisez `git ls-files`.

<br>

Le fichier est **supprimé du répertoire de travail mais pas de la zone d'index**.

## Supprimer un fichier

<br>

`rm file2.txt`

<br>

![](img/workflow_git_18.png){fig-align="left"}

## Supprimer un fichier

<br>

![](img/workflow_git_19.png){fig-align="left"}

## Supprimer un fichier

<br>

Pour retirer de la zone d'index un fichier supprimé du répertoire de travail, il faut procéder de la même façon que pour un commit "classique" :

<br>

`git add file2.txt`

<br>

![](img/workflow_git_20.png){fig-align="left"}

<br>

Cette commande **ajoute la suppression du fichier à la zone d'index**.

## Supprimer un fichier

<br>

`git commit -m "suppression du fichier file2.txt"`

<br>

![](img/workflow_git_21.png){fig-align="left"}

## Supprimer un fichier

<br>

Il est possible de supprimer un fichier à la fois du répertoire de travail et de la zone d'index, à l'aide de la commande `git rm`.

<br>

`touch file3.txt`

<br>

![](img/workflow_git_22.png){fig-align="left"}

## Supprimer un fichier

<br>

`git add file3.txt`

<br>

![](img/workflow_git_23.png){fig-align="left"}

## Supprimer un fichier

<br>

`git commit -m "creation du fichier vide file3.txt"`

<br>

![](img/workflow_git_24.png){fig-align="left"}

## Supprimer un fichier

<br>

`git rm file3.txt`

<br>

![](img/workflow_git_25.png){fig-align="left"}

## Supprimer un fichier

<br>

![](img/workflow_git_27.png){fig-align="left"}

## Supprimer un fichier

<br>

`git commit -m "suppression du fichier file3.txt"`

<br>

![](img/workflow_git_26.png){fig-align="left"}

## Déplacer ou renommer un fichier

<br>

La commande `mv` (move) permet de déplacer le contenu d'un fichier dans un autre (revient à renommer un fichier) :

`mv file1.txt file0.txt`

<br>

![](img/workflow_git_28.png){fig-align="left"}

## Déplacer ou renommer un fichier

<br>

`git add file1.txt`

<br>

![](img/workflow_git_29.png){fig-align="left"}

## Déplacer ou renommer un fichier

<br>

`git add file0.txt`

<br>

![](img/workflow_git_30.png){fig-align="left"}

## Déplacer ou renommer un fichier

<br>

`git commit -m "fichier file1.txt renomme file0.txt"`

<br>

![](img/workflow_git_31.png){fig-align="left"}

## Déplacer ou renommer un fichier

<br>

Comme nous l'avons vu pour les commandes `rm` et `git rm`, la commande `git mv` permet d'appliquer la commande `mv` au répertoire de travail et à la zone d'index.

<br>

`git mv file0.txt file1.txt`

<br>

![](img/workflow_git_32.png){fig-align="left"}

## Déplacer ou renommer un fichier

<br>

`git commit -m "fichier file0.txt renomme file1.txt"`

<br>

![](img/workflow_git_33.png){fig-align="left"}

# Ignorer des fichiers

## Retirer un fichier de la zone d'index

<br>

Imaginons que nous avons ajouté un fichier de logs à la zone d'index par erreur (peut arriver en utilisant `git add .` ou `git add -A`) :

<br>

`touch logs`

<br>

![](img/workflow_git_34.png){fig-align="left"}

## Retirer un fichier de la zone d'index

<br>

Imaginons que nous avons ajouté un fichier de logs à la zone d'index par erreur (peut arriver en utilisant `git add .` ou `git add -A`) :

<br>

`git add .`

<br>

![](img/workflow_git_35.png){fig-align="left"}

## Retirer un fichier de la zone d'index

<br>

![](img/workflow_git_36.png){fig-align="left"}

## Retirer un fichier de la zone d'index

<br>

`git restore --staged logs`

<br>

![](img/workflow_git_37.png){fig-align="left"}

## Retirer un fichier de la zone d'index

<br>

![](img/workflow_git_38.png){fig-align="left"}

## Ignorer des fichiers

<br>

Pour qu'un fichier du répertoire de travail **ne soit pas tracé** par Git, il faut l'ajouter dans un fichier nommé `.gitignore` placé à la racine du répertoire :

`echo logs > .gitignore`

<br>

![](img/workflow_git_39.png){fig-align="left"}

## Ignorer des fichiers

<br>

`git add .gitignore`

<br>

![](img/workflow_git_40.png){fig-align="left"}

## Ignorer des fichiers

<br>

`git commit -m "creation du fichier logs et ajout de ce fichier dans .gitignore"`

<br>

![](img/workflow_git_41.png){fig-align="left"}

## Ignorer des fichiers

<br>

![](img/workflow_git_42.png){fig-align="left"}

## Ignorer des fichiers

<br>

Le site GitHub propose des templates de fichiers `.gitignore` pour différents langages de programmation : **https://github.com/github/gitignore**

Aperçu du fichier `.gitignore` proposé pour R :

![](img/git_workflow_39.png)

## Ignorer des fichiers

<br>

Le fichier `.gitignore` permet d'ignorer uniquement les fichiers qui ne sont pas tracés par git.

<br>

`touch bin`

<br>

![](img/workflow_git_43.png){fig-align="left"}

## Ignorer des fichiers

<br>

`git add .`

<br>

![](img/workflow_git_44.png){fig-align="left"}

## Ignorer des fichiers

<br>

`git commit -m "creation du fichier bin"`

<br>

![](img/workflow_git_45.png){fig-align="left"}

## Ignorer des fichiers

<br>

`echo bin >> .gitignore`

<br>

![](img/workflow_git_46.png){fig-align="left"}

## Ignorer des fichiers

<br>

`git add .`

<br>

![](img/workflow_git_47.png){fig-align="left"}

## Ignorer des fichiers

<br>

`git commit -m "ajout du fichier bin dans .gitignore"`

<br>

![](img/workflow_git_48.png){fig-align="left"}

## Ignorer des fichiers

<br>

`echo test > bin`

<br>

![](img/workflow_git_49.png){fig-align="left"}

## Ignorer des fichiers

<br>

![](img/workflow_git_52.png){fig-align="left"}

Le fichier `bin` est toujours tracé !

## Ignorer des fichiers

<br>

La commande `git rm --cached` permet de supprimer un fichier tracé de la zone d'index :

`git rm --cached bin`

<br>

![](img/workflow_git_50.png){fig-align="left"}

## Ignorer des fichiers

<br>

`git commit -m "suppression du fichier bin du depot"`

<br>

![](img/workflow_git_51.png){fig-align="left"}

## Ignorer des fichiers

<br>

![](img/workflow_git_53.png){fig-align="left"}

# Naviguer dans l'historique

## Nettoyer le répertoire de travail

<br>

Supprimons le contenu de notre répertoire de travail :

<br>

`rm -rf .git`

`rm .gitignore bin logs file1.txt`

<br>

<br>

Initialisons un nouveau dépôt Git :

<br>

`git init`

## Création d'un fichier

<br>

`touch file1`

`git add .`

`git commit -m "creation du fichier file1"`

<br>

![](img/history_01.png){fig-align="left"}

## Modifications

<br>

`touch file2`

`git add .`

<br>

![](img/history_02.png){fig-align="left"}

## Modifications

<br>

`echo hello > file1`

`echo hello > file2`

<br>

![](img/history_03.png){fig-align="left"}

## Afficher l'état du répertoire

<br>

![](img/history_04.png){fig-align="left"}

## Afficher l'état du répertoire

<br>

La commande `git status -s` (short) permet d'afficher un aperçu condensé de l'état du répertoire :

<br>

![](img/history_05.png){fig-align="left"}

<br>

Les deux colonnes à gauche du nom du fichier se lisent de la manière suivante :

-   **zone d'index à gauche**

-   **répertoire de travail à droite**

## Afficher l'état du répertoire

<br>

`git add .`

`git status -s`

<br>

![](img/history_06.png){fig-align="left"}

## Commit

<br>

`git commit -m "creation du fichier file2 + ajout de texte dans file1 et file2"`

<br>

![](img/history_07.png){fig-align="left"}

## Une dernière modification

<br>

Ajoutons du texte dans le fichier file1 :

`echo world >> file1`

`git add .`

`git commit -m "ajout de texte dans file1"`

<br>

![](img/history_08.png){fig-align="left"}

## L'historique des commits

<br>

La commande git log permet d'afficher l'historique des commits :

`git log`

<br>

![](img/history_09.png){fig-align="left"}

## L'historique des commits

<br>

![](img/history_10.png){fig-align="left"}

## L'historique des commits

<br>

![](img/history_11.png){fig-align="left"}

## L'historique des commits

<br>

Par défaut, **le dernier commit est affiché en premier**.

<br>

Pour inverser l'ordre des commits, utilisez l'option `--reverse` :

`git log --reverse`

![](img/history_12.png){fig-align="left"}

## L'historique des commits

<br>

Pour un affichage condensé de l'historique, utilisez l'option `--oneline` :

`git log --oneline`

<br>

![](img/history_13.png){fig-align="left"}

## L'historique des commits

<br>

![](img/history_14.png){fig-align="left"}

## Naviguer dans l'historique

<br>

La commande `git show` permet d'afficher le détail d'un commit :

-   `git show <commit-id>`

-   `git show HEAD~<n>` où n indique le nombre de commits à partir du dernier

<br>

![](img/history_15.png){fig-align="left"}

## Naviguer dans l'historique

<br>

![](img/history_16.png){fig-align="left"}

## Naviguer dans l'historique

<br>

La commande suivante permet d'afficher pour un commit le contenu d'un fichier :

-   `git show <commit-id>:<file>`

-   `git show HEAD~<n>:<file>`

## Naviguer dans l'historique

<br>

![](img/history_20.png){fig-align="left"}
