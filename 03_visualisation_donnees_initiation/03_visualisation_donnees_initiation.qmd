---
format:
  revealjs:
    theme: custom.scss
    fontsize: 1.8em
editor: visual
title-slide-attributes: 
  data-background-image: title.png
  data-background-opacity: 50%
---

![](img/title.png){fig-align="center"}

## Les ateliers codons

<br>

-   Des **cr√©neaux r√©guliers** pour **d√©couvrir** et **progresser**

-   Deux parcours : **initiation** et **perfectionnement**

-   Une **√©quipe d'animation**

-   Des **supports** disponibles en ligne : [ateliers-codons.netlify.app/](https://ateliers-codons.netlify.app/)

<br>

#### Sources pour cet atelier :

<br>

-   [Data visualisation - Part 1 (Our Coding Club)](https://ourcodingclub.github.io/tutorials/datavis/)

-   [Data visualisation - Part 2 (Our Coding Club)](https://ourcodingclub.github.io/tutorials/data-vis-2/)

-   R Course TU Dresden (C√©dric Scherer)

## 

<br>

![Le workflow en Data Science, adapt√© de ["R for Data Science"](https://r4ds.hadley.nz/)](img/data_science_workflow_01.png){fig-align="center"}

## 

<br>

![Le workflow en Data Science, adapt√© de ["R for Data Science"](https://r4ds.hadley.nz/)](img/data_science_workflow_02.png){fig-align="center"}

# Visualisation de donn√©es avec {ggplot2}

## 

![](img/ggplot2_hex_logo.png){fig-align="center"}

`{ggplot2}` est un outil de cr√©ation de graphiques bas√© sur la **"grammaire des graphiques"** (Wilkinson, 2005).

Vous fournissez les donn√©es, vous dites √† `{ggplot2}` comment associer des variables √† des param√®tres esth√©tiques, quels types de repr√©sentation utiliser, et `{ggplot2}` s'occupe des d√©tails.

## Avantages de {ggplot2}

<br>

-   approche "code en premier" ‚ûù **workflow reproductible et transparent**

-   la **"grammaire des graphiques"** sous-jacente est coh√©rente

-   **tr√®s flexible**, principe de couches pour ajouter des √©l√©ments

-   syst√®me de **th√®mes** pour polir l'apparence du graphique

-   beaucoup de **fonctionnalit√©s suppl√©mentaires** gr√¢ce √† des packages

-   **communaut√© en ligne** tr√®s active et pr√™te √† aider

## 

![Illustration de [Allison Horst](https://allisonhorst.com/)](img/horst_ggplot2_01.png)

## 

![Illustration de [Allison Horst](https://allisonhorst.com/)](img/horst_ggplot2_02.png)

## 

<br>

![[BBC Visual and Data Journalism cookbook for R graphics](https://bbc.github.io/rcookbook/)](img/bbc_ggplot2.png)

## 

<br>

![[BBC Visual and Data Journalism cookbook for R graphics](https://bbc.github.io/rcookbook/)](img/bbc_text.png)

## 

![S√©lection de visualisations cr√©√©es enti√®rement avec ggplot2 par Thomas Lin Pedersen, Georgios Karamanis, Timo Gossenbacher, Torsten Sprenger, Jake Kaupp, Jack Davison et C√©dric Scherer](img/ggplot2_selection.png)

# {ggplot2}

## Le package {ggplot2}

<br>

... est un **package R de visualisation de donn√©es** cr√©√© par Hadley Wickham en 2005

```{r, echo=TRUE, eval=FALSE}
install.packages("ggplot2")
library(ggplot2)
```

<br>

... fait partie du {tidyverse}

```{r, echo=TRUE, eval=FALSE}
install.packages("tidyverse")
library(tidyverse)
```

# La grammaire des graphiques

## La grammaire de {ggplot2}

<br>

| Composante              | Fonction       | Explication                                                                                |
|------------------|------------------|-----------------------------------|
| **Donn√©es**             | `ggplot(data)` | *Les donn√©es √† visualiser*                                                                 |
| **Esth√©tique**          | `aes()`        | *Apparence esth√©tique (position, couleur, forme, taille, ...)*                             |
| **Objets g√©om√©triques** | `geom_*()`     | *Formes g√©om√©triques utilis√©es pour repr√©senter les donn√©es (points, lignes, barres, ...)* |
| **Th√®me**               | `theme_*()`    | *Apparence globale du graphique (arri√®re-plan, quadrillage, ...)*                          |

## Le jeu de donn√©es `penguins` üêß

<br>

-   Donn√©es collect√©es et publi√©es par [Dr Kristen Gorman](https://www.uaf.edu/cfos/people/faculty/detail/kristen-gorman.php) lors d'une √©tude men√©e dans la [Palmer Station](https://pallter.marine.rutgers.edu/) en Antarctique, appartenant √† la [LTER](https://lternet.edu/) (Long Term Ecological Research Network).

-   Mesure de diff√©rents param√®tres (par exemple la longueur des ailes, la masse corporelle) chez **342 individus** appartenant √† **3 esp√®ces** de pingouins vivant sur **3 √Æles** de l'archipel Palmer.

-   Deux jeux de donn√©es :

    -   donn√©es brutes (`penguins_raw`)

    -   **donn√©es nettoy√©es (`penguins`)**

-   Donn√©es disponibles dans un package R : [`{palmerpenguins}`](https://allisonhorst.github.io/palmerpenguins/).

```{r, echo=FALSE, eval=TRUE}
library(tidyverse)
library(palmerpenguins)
```

```{r, echo=TRUE, eval=FALSE}
install.packages("palmerpenguins")
library(palmerpenguins)
```

## 

| Variable          | Description                                                           | Classe         |
|------------------|-----------------------------------|------------------|
| species           | esp√®ce de pingouin (Adelie, Chinstrap et Gentoo)                      | Facteur        |
| island            | √Æle de l'archipel Palmer, en Antarctique (Biscoe, Dream ou Torgersen) | Facteur        |
| bill_length_mm    | longueur du bec (mm)                                                  | Nombre d√©cimal |
| bill_depth_mm     | hauteur du bec (mm)                                                   | Nombre d√©cimal |
| flipper_length_mm | longueur de l'aile (mm)                                               | Nombre entier  |
| body_mass_g       | masse corporelle (g)                                                  | Nombre entier  |
| sex               | sexe du pingouin (m√¢le ou femelle)                                    | Facteur        |
| year              | ann√©e de l'√©tude (2007, 2008 ou 2009)                                 | Nombre entier  |

# Concepts fondamentaux

## `ggplot2::ggplot()`

<br>

```{r, echo=TRUE, eval=FALSE}
?ggplot
```

![](img/ggplot_help.png)

## Donn√©es

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(data = penguins)
```

## Esth√©tique

<br>

#### = "mapping" de param√®tres esth√©tiques sur des variables

<br>

-   position (`x`, `y`)

-   couleur (`color` ou `colour`, `fill`)

-   forme (`shape`, `linetype`)

-   taille (`size`)

-   transparence (`alpha`)

-   groupes (`group`)

## Esth√©tique

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(data = penguins) +
  aes(x = flipper_length_mm,
      y = bill_length_mm)
```

## Esth√©tique

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm,
                y = bill_length_mm)
)
```

## Esth√©tique

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(
  penguins,
  aes(x = flipper_length_mm,
      y = bill_length_mm)
)
```

## Esth√©tique

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
penguins |> 
  ggplot(
    aes(x = flipper_length_mm,
        y = bill_length_mm)
  )
```

## Objets g√©om√©triques

#### = repr√©senter les donn√©es gr√¢ce √† des formes g√©om√©triques

<br>

-   points

-   lignes

-   polygones

-   texte

-   ...

# Scatter plot

## `geom_point()`

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(
  penguins,
  aes(x = flipper_length_mm,
      y = bill_length_mm)
  ) +
  geom_point()
```

## Propri√©t√©s visuelles des couches

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(
  penguins,
  aes(x = flipper_length_mm,
      y = bill_length_mm)
  ) +
  geom_point(
    color = "cyan4",
    alpha = 0.5,
    shape = "Y",
    size = 5
  )
```

## Propri√©t√©s visuelles : fix√©es ou "mapp√©es" ?

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = flipper_length_mm,
      y = bill_length_mm)
  ) +
  geom_point(
    color = "cyan4",
    alpha = 0.5
  )
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = flipper_length_mm,
      y = bill_length_mm)
  ) +
  geom_point(
    aes(color = species),
    alpha = 0.5
  )
```
:::
:::

## Mise en pratique - `geom_point()`

<br>

-   Cr√©ez un nuage de points en utilisant les variables suivantes :

    -   x = `bill_length_mm`

    -   y = `bill_depth_mm`

-   Testez diff√©rentes formes de points (valeurs num√©riques entre 0 et 21)

-   Testez diff√©rentes tailles de points

-   Mappez la variable `species` sur la couleur des points

-   Mappez (en plus de l'√©tape pr√©c√©dente) la variable `body_mass_g` sur la taille des points

## Mise en pratique - `geom_point()`

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm)
  ) +
  geom_point()
```

## Mise en pratique - `geom_point()`

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm)
  ) +
  geom_point(shape = 5)
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm)
  ) +
  geom_point(shape = 21)
```
:::
:::

## Mise en pratique - `geom_point()`

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm)
  ) +
  geom_point(size = 0.5)
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm)
  ) +
  geom_point(size = 2)
```
:::
:::

## Mise en pratique - `geom_point()`

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm)
  ) +
  geom_point(aes(color = species))
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm)
  ) +
  geom_point(aes(color = species,
                 size = body_mass_g))
```
:::
:::

## `geom_point()`

<br>

L'argument `shape` peut prendre les valeurs num√©riques suivantes :

![Source : [Albert's blog](https://blog.albertkuo.me/post/point-shape-options-in-ggplot/)](img/geom_point_shapes.png)

## `geom_point()`

<br>

Pour les formes 21 √† 25, deux √©l√©ments peuvent √™tre color√©s :

-   le contour (avec `color = ‚Ä¶`)

-   l'int√©rieur (avec `fill = ‚Ä¶`)

<br>

Pour ces formes, l'√©paisseur du contour peut √™tre modifi√©e avec l'argument `stroke = ‚Ä¶`

## `geom_point()`

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  slice(1:5) |> 
  ggplot(aes(x = bill_length_mm,
             y = bill_depth_mm)
         ) +
    geom_point(shape = 21,
               size = 8,
               color = "red",
               fill = "grey")
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  slice(1:5) |> 
  ggplot(aes(x = bill_length_mm,
             y = bill_depth_mm)
         ) +
    geom_point(shape = 21,
               size = 8,
               color = "red",
               fill = "grey",
               stroke = 3)
```
:::
:::

## Propri√©t√©s visuelles : globales ou locales ?

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = bill_length_mm,
             y = bill_depth_mm,
             color = species)
         ) +
    geom_point(alpha = 0.5)
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = bill_length_mm,
             y = bill_depth_mm)
         ) +
    geom_point(aes(color = species),
               alpha = 0.5)
```
:::
:::

# Histogramme

## `geom_histogram()`

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
penguins |> 
  ggplot(aes(x = body_mass_g)) +
  geom_histogram()
```

## `geom_histogram()`

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
penguins |> 
  ggplot(aes(x = body_mass_g)) +
  geom_histogram(color = "white",
                 fill = "purple")
```

## `geom_histogram()` - bins & binwidth

<br>

```{r}
#| echo: true
#| eval: true
#| message: true
#| warning: true
#| output-location: column
penguins |> 
  ggplot(aes(x = body_mass_g)) +
  geom_histogram(color = "white",
                 fill = "purple")
```

-   `bins = ‚Ä¶` permet de d√©finir le nombre de classes (par d√©faut 30)

-   `binwidth = ‚Ä¶` permet de d√©finir la largeur de chaque classe (unit√©s d√©finies par la variable repr√©sent√©e)

## `geom_histogram()` - bins & binwidth

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = body_mass_g)) +
  geom_histogram(color = "white",
                 fill = "purple",
                 bins = 4)
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = body_mass_g)) +
  geom_histogram(color = "white",
                 fill = "purple",
                 binwidth = 500)
```
:::
:::

## `geom_histogram()` - couleurs mapp√©es

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
penguins |> 
  ggplot(aes(x = body_mass_g,
             fill = species)) +
  geom_histogram(color = "white")
```

# Boxplot

## `geom_boxplot()`

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
penguins |> 
  ggplot(aes(x = species,
             y = body_mass_g)) +
  geom_boxplot()
```

## `geom_boxplot()`

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
penguins |> 
  ggplot(aes(x = species,
             y = body_mass_g,
             color = species,
             fill = species)) +
  geom_boxplot(alpha = 0.5)
```

## `geom_boxplot()` - supprimer la l√©gende

<br>

Dans le cas pr√©sent, les noms d'esp√®ces sont suffisamment diff√©renci√©s (noms sur l'axe x + couleurs) pour se passer de la l√©gende.

Pour supprimer la l√©gende d'une figure, utilisez l'argument `show.legend = FALSE`.

```{r}
#| echo: true
#| eval: true
#| output-location: column
penguins |> 
  ggplot(aes(x = species,
             y = body_mass_g,
             color = species,
             fill = species)) +
  geom_boxplot(alpha = 0.5,
               show.legend = FALSE)
```

# Barplot

## `geom_bar()`

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
penguins |> 
  ggplot(aes(x = species)) +
  geom_bar()
```

## `geom_bar()`

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
penguins |> 
  ggplot(aes(x = species,
             fill = species)) +
  geom_bar(width = 0.75,
           show.legend = FALSE)
```

## `geom_bar()`

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = species,
             fill = island)) +
  geom_bar(width = 0.75)
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = island,
             fill = species)) +
  geom_bar(width = 0.75)
```
:::
:::

## `geom_bar()` versus `geom_col()`

<br>

Les objets g√©om√©triques `geom_bar()` et `geom_col()` permettent de cr√©er des diagrammes en barres :

-   avec **`geom_bar()`**, la hauteur des barres est proportionnelle au nombre d'observations de chaque groupe

-   avec **`geom_col()`**, la hauteur des barres repr√©sente des valeurs existant des les donn√©es

## `geom_bar()` versus `geom_col()`

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = species,
             fill = species)) +
  geom_bar(width = 0.75,
           show.legend = FALSE)
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  count(species) |> 
  ggplot(aes(x = species, y = n,
             fill = species)) +
  geom_col(width = 0.75,
           show.legend = FALSE)
```
:::
:::

## `geom_bar()` versus `geom_col()`

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = species,
             fill = island)) +
  geom_bar(width = 0.75)
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  count(species, island) |> 
  ggplot(aes(x = species, y = n,
             fill = island)) +
  geom_col(width = 0.75)
```
:::
:::

# Titres

## `labs()`

<br>

`{ggplot2}` g√©n√®re automatiquement des titres pour les axes, en fonction des noms des variables repr√©sent√©es.

`labs()` permet de modifier ou supprimer ces titres, ainsi que d'ajouter au graphique :

-   un titre

-   un sous-titre

-   une note

## `labs()`

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: slide
penguins |> 
  ggplot(aes(x = flipper_length_mm,
             y = bill_length_mm,
             color = species)) +
  geom_point() +
  labs(x = "Longueur de l'aile (mm)",
       y = "Longueur du bec (mm)",
       title = "Longueur de l'aile et du bec",
       subtitle = "chez 3 esp√®ces de pingouins de l'archipel Palmer",
       caption = "Source : package {palmerpenguins}")
```

## `labs()` et l√©gende

<br>

labs() vous permet √©galement de modifier le titre d'une l√©gende :

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = flipper_length_mm,
             y = bill_length_mm,
             color = species)) +
  geom_point() +
  labs(color = "Nom de l'esp√®ce")
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = species,
             fill = island)) +
  geom_bar(width = 0.75) +
  labs(fill = "Nom de l'√Æle")
```
:::
:::

# Th√®mes

## `theme_*()`

<br>

Huit th√®mes sont pr√©d√©finis dans {ggplot2} et permettent de modifier l'apparence g√©n√©rale d'un graphique :

<br>

-   `theme_gray()` - le th√®me par d√©faut

-   `theme_bw()`

-   `theme_classic()`

-   `theme_dark()`

-   `theme_light()`

-   `theme_linedraw()`

-   `theme_minimal()`

-   `theme_void()`

## `theme_*()`

<br>

Pour utiliser l'un des th√®mes pr√©d√©finis :

<br>

```{r}
#| echo: true
#| eval: false
penguins |> 
  ggplot(aes(x = flipper_length_mm,
             y = bill_length_mm,
             color = species)) +
  geom_point() +
  theme_*()
```

## `theme_gray()`

<br>

```{r}
#| echo: false
#| eval: true
penguins |> 
  ggplot(aes(x = flipper_length_mm,
             y = bill_length_mm,
             color = species)) +
  geom_point() +
  theme_gray()
```

## `theme_bw()`

<br>

```{r}
#| echo: false
#| eval: true
penguins |> 
  ggplot(aes(x = flipper_length_mm,
             y = bill_length_mm,
             color = species)) +
  geom_point() +
  theme_bw()
```

## `theme_classic()`

<br>

```{r}
#| echo: false
#| eval: true
penguins |> 
  ggplot(aes(x = flipper_length_mm,
             y = bill_length_mm,
             color = species)) +
  geom_point() +
  theme_classic()
```

## `theme_dark()`

<br>

```{r}
#| echo: false
#| eval: true
penguins |> 
  ggplot(aes(x = flipper_length_mm,
             y = bill_length_mm,
             color = species)) +
  geom_point() +
  theme_dark()
```

## `theme_light()`

<br>

```{r}
#| echo: false
#| eval: true
penguins |> 
  ggplot(aes(x = flipper_length_mm,
             y = bill_length_mm,
             color = species)) +
  geom_point() +
  theme_light()
```

## `theme_linedraw()`

<br>

```{r}
#| echo: false
#| eval: true
penguins |> 
  ggplot(aes(x = flipper_length_mm,
             y = bill_length_mm,
             color = species)) +
  geom_point() +
  theme_linedraw()
```

## `theme_minimal()`

<br>

```{r}
#| echo: false
#| eval: true
penguins |> 
  ggplot(aes(x = flipper_length_mm,
             y = bill_length_mm,
             color = species)) +
  geom_point() +
  theme_minimal()
```

## `theme_void()`

<br>

```{r}
#| echo: false
#| eval: true
penguins |> 
  ggplot(aes(x = flipper_length_mm,
             y = bill_length_mm,
             color = species)) +
  geom_point() +
  theme_void()
```

# Superposer des couches

## Combiner des objets g√©om√©triques

<br>

`{ggplot2}` permet de combiner diff√©rentes repr√©sentations visuelles sur un m√™me graphique :

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
penguins |> 
  ggplot(aes(x = species, 
             y = body_mass_g,
             color = species),
         show.legend = FALSE) +
  geom_point() +
  geom_boxplot()

```

## `geom_smooth()`

<br>

La fonction `geom_smooth()` permet d'ajouter une droite de **r√©gression lin√©aire** √† un nuage de points :

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm,
      color = species)
  ) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm",
              se = FALSE)
```

## Couleur : encodage global ou local ?

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm,
      color = species)
  ) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm",
              se = FALSE)
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm)
  ) +
  geom_point(aes(color = species),
             alpha = 0.5) +
  geom_smooth(method = "lm",
              se = FALSE)
```
:::
:::

## Le param√®tre `group`

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm)
  ) +
  geom_point(aes(color = species),
             alpha = 0.5) +
  geom_smooth(aes(group = species),
              method = "lm",
              se = FALSE)
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm,
      color = species,
      group = species)
  ) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm",
              se = FALSE)
```
:::
:::

## Ecraser les param√®tres globaux

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm,
      color = species,
      group = species)
  ) +
  geom_point(alpha = 0.5) +
  geom_smooth(method = "lm",
              se = FALSE,
              color = "black")
```

# Couleurs

## Les couleurs dans R

<br>

Dans R, les couleurs peuvent se pr√©ciser de trois mani√®res :

-   par leur **nom**

-   par leur **code hexad√©cimal**

-   par leur **code RVB**

<br>

La fonction `colors()` permet d'afficher la liste de toutes les couleurs existantes.

```{r}
#| echo: true
#| eval: true
head(colors())
```

## Les couleurs dans R

<br>

```{r}
#| echo: true
#| eval: false
# Nom
penguins |> 
  ggplot(aes(x = species)) +
  geom_bar(fill = "darkblue")

# Code hexadecimal
penguins |> 
  ggplot(aes(x = species)) +
  geom_bar(fill = "#00008b")

# Code RVB
penguins |> 
  ggplot(aes(x = species)) +
  geom_bar(fill = rgb(red = 0, green = 0, blue = 139,
                      maxColorValue = 255))
```

## Les palettes

<br>

R dispose de plusieurs palettes de couleurs (discr√®tes ou continues) :

![](img/rcolorbrewer.png){fig-align="center"}

## Les palettes

<br>

Les fonctions suivantes permettent d'utiliser une palette de couleurs :

-   `scale_color_brewer(palette = ‚Ä¶)` s'appliquera au param√®tre `color` des objets g√©om√©triques

-   `scale_fill_brewer(palette = ‚Ä¶)` s'appliquera au param√®tre `fill` des objets g√©om√©triques

## Les palettes

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = bill_length_mm,
             y = bill_depth_mm,
             color = species)) +
  geom_point() +
  scale_color_brewer(
    palette = "Accent")
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = species,
             fill = species)) +
  geom_bar(show.legend = FALSE) +
  scale_fill_brewer(
    palette = "Accent")
```
:::
:::

## D√©finir les couleurs

<br>

Vous pouvez d√©finir manuellement les couleurs :

-   en cr√©ant un vecteur de couleurs avec les valeurs associ√©es

-   en appelant ce vecteur dans la fonction `scale_*_manual`

## D√©finir les couleurs

<br>

```{r}
#| echo: true
#| eval: true
custom.cols <- c("Adelie" = "darkorange",
                 "Chinstrap" = "purple",
                 "Gentoo" = "cyan4")
```

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = bill_length_mm,
             y = bill_depth_mm,
             color = species)) +
  geom_point() +
  scale_color_manual(
    values = custom.cols
  )
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = species,
             fill = species)) +
  geom_bar(show.legend = FALSE) +
  scale_fill_manual(
    values = custom.cols)
```
:::
:::

## D√©finir les couleurs

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = bill_length_mm,
             y = bill_depth_mm,
             color = species)) +
  geom_point() +
  scale_color_manual(
    values = c("Adelie" = "darkorange",
               "Chinstrap" = "purple",
               "Gentoo" = "cyan4"))
```

# L'argument `position`

## L'argument `position`

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = island,
             y = body_mass_g,
             color = species)) +
  geom_point(alpha = 0.3)
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = island,
             y = body_mass_g,
             color = species)) +
  geom_point(alpha = 0.3,
             position = "jitter")
```
:::
:::

## L'argument `position`

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = island,
             y = body_mass_g,
             color = species)) +
  geom_point(alpha = 0.3,
             position = position_jitter())
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = island,
             y = body_mass_g,
             color = species)) +
  geom_jitter(alpha = 0.3)
```
:::
:::

## L'argument `position`

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = island,
             y = body_mass_g,
             color = species)) +
  geom_jitter(alpha = 0.3,
              width = 0.5)
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  ggplot(aes(x = island,
             y = body_mass_g,
             color = species)) +
  geom_jitter(alpha = 0.3,
              width = 0.2)
```
:::
:::
