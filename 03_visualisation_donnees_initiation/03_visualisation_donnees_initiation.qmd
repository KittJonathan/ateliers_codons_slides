---
format:
  revealjs:
    theme: custom.scss
    fontsize: 1.8em
editor: visual
title-slide-attributes: 
  data-background-image: title.png
  data-background-opacity: 50%
---

![](img/title.png){fig-align="center"}

## Les ateliers codons

<br>

-   Des **cr√©neaux r√©guliers** pour **d√©couvrir** et **progresser**

-   Deux parcours : **initiation** et **perfectionnement**

-   Une **√©quipe d'animation**

-   Des **supports** disponibles en ligne : [ateliers-codons.netlify.app/](https://ateliers-codons.netlify.app/)

<br>

#### Sources pour cet atelier :

<br>

-   [Data visualisation - Part 1 (Our Coding Club)](https://ourcodingclub.github.io/tutorials/datavis/)

-   [Data visualisation - Part 2 (Our Coding Club)](https://ourcodingclub.github.io/tutorials/data-vis-2/)

-   R Course TU Dresden (C√©dric Scherer)

## 

<br>

![Le workflow en Data Science, adapt√© de ["R for Data Science"](https://r4ds.hadley.nz/)](img/data_science_workflow_01.png){fig-align="center"}

## 

<br>

![Le workflow en Data Science, adapt√© de ["R for Data Science"](https://r4ds.hadley.nz/)](img/data_science_workflow_02.png){fig-align="center"}

# Visualisation de donn√©es avec {ggplot2}

## 

![](img/ggplot2_hex_logo.png){fig-align="center"}

`{ggplot2}` est un outil de cr√©ation de graphiques bas√© sur la **"grammaire des graphiques"** (Wilkinson, 2005).

Vous fournissez les donn√©es, vous dites √† `{ggplot2}` comment associer des variables √† des param√®tres esth√©tiques, quels types de repr√©sentation utiliser, et `{ggplot2}` s'occupe des d√©tails.

## Avantages de {ggplot2}

<br>

-   approche "code en premier" ‚ûù **workflow reproductible et transparent**

-   la **"grammaire des graphiques"** sous-jacente est coh√©rente

-   **tr√®s flexible**, principe de couches pour ajouter des √©l√©ments

-   syst√®me de **th√®mes** pour polir l'apparence du graphique

-   beaucoup de **fonctionnalit√©s suppl√©mentaires** gr√¢ce √† des packages

-   **communaut√© en ligne** tr√®s active et pr√™te √† aider

## 

![Illustration de [Allison Horst](https://allisonhorst.com/)](img/horst_ggplot2_01.png)

## 

![Illustration de [Allison Horst](https://allisonhorst.com/)](img/horst_ggplot2_02.png)

## 

<br>

![[BBC Visual and Data Journalism cookbook for R graphics](https://bbc.github.io/rcookbook/)](img/bbc_ggplot2.png)

## 

<br>

![[BBC Visual and Data Journalism cookbook for R graphics](https://bbc.github.io/rcookbook/)](img/bbc_text.png)

## 

![S√©lection de visualisations cr√©√©es enti√®rement avec ggplot2 par Thomas Lin Pedersen, Georgios Karamanis, Timo Gossenbacher, Torsten Sprenger, Jake Kaupp, Jack Davison et C√©dric Scherer](img/ggplot2_selection.png)

# {ggplot2}

## Le package {ggplot2}

<br>

... est un **package R de visualisation de donn√©es** cr√©√© par Hadley Wickham en 2005

```{r, echo=TRUE, eval=FALSE}
install.packages("ggplot2")
library(ggplot2)
```

<br>

... fait partie du {tidyverse}

```{r, echo=TRUE, eval=FALSE}
install.packages("tidyverse")
library(tidyverse)
```

# La grammaire des graphiques

## La grammaire de {ggplot2}

<br>

| Composante     | Fonction       | Explication                                                        |
|----------------|----------------|-----------------------------------------|
| **Data**       | `ggplot(data)` | *Les donn√©es brutes qu'on souhaite visualiser*                     |
| **Aesthetics** | `aes()`        | *Associations esth√©tiques entre variables et propri√©t√©s visuelles* |
| **Geometries** | `geom_*()`     | *Formes g√©om√©triques utilis√©es pour repr√©senter les donn√©es*       |

## La grammaire de {ggplot2}

<br>

| Composante        | Fonction       | Explication                                                        |
|----------------|----------------|----------------------------------------|
| **Data**          | `ggplot(data)` | *Les donn√©es brutes qu'on souhaite visualiser*                     |
| **Aesthetics**    | `aes()`        | *Associations esth√©tiques entre variables et propri√©t√©s visuelles* |
| **Geometries**    | `geom_*()`     | *Formes g√©om√©triques utilis√©es pour repr√©senter les donn√©es*       |
| **Visual themes** | `theme_*()`    | *Apparence visuelle g√©n√©rale d'un graphique*                       |

## Le jeu de donn√©es `penguins` üêß

<br>

-   Donn√©es collect√©es et publi√©es par [Dr Kristen Gorman](https://www.uaf.edu/cfos/people/faculty/detail/kristen-gorman.php) lors d'une √©tude men√©e dans la [Palmer Station](https://pallter.marine.rutgers.edu/) en Antarctique, appartenant √† la [LTER](https://lternet.edu/) (Long Term Ecological Research Network).

-   Mesure de diff√©rents param√®tres (par exemple la longueur des ailes, la masse corporelle) chez **342 individus** appartenant √† **3 esp√®ces** de pingouins vivant sur **3 √Æles** de l'archipel Palmer.

-   Deux jeux de donn√©es :

    -   donn√©es brutes (`penguins_raw`)

    -   **donn√©es nettoy√©es (`penguins`)**

-   Donn√©es disponibles dans un package R : [`{palmerpenguins}`](https://allisonhorst.github.io/palmerpenguins/).

```{r, echo=FALSE, eval=TRUE}
library(tidyverse)
library(palmerpenguins)
```

```{r, echo=TRUE, eval=FALSE}
install.packages("palmerpenguins")
library(palmerpenguins)
```

## 

| Variable          | Description                                                           | Classe         |
|----------------|----------------------------------------|----------------|
| species           | esp√®ce de pingouin (Adelie, Chinstrap et Gentoo)                      | Facteur        |
| island            | √Æle de l'archipel Palmer, en Antarctique (Biscoe, Dream ou Torgersen) | Facteur        |
| bill_length_mm    | longueur du bec (mm)                                                  | Nombre d√©cimal |
| bill_depth_mm     | hauteur du bec (mm)                                                   | Nombre d√©cimal |
| flipper_length_mm | longueur de l'aile (mm)                                               | Nombre entier  |
| body_mass_g       | masse corporelle (g)                                                  | Nombre entier  |
| sex               | sexe du pingouin (m√¢le ou femelle)                                    | Facteur        |
| year              | ann√©e de l'√©tude (2007, 2008 ou 2009)                                 | Nombre entier  |

# Concepts fondamentaux

## `ggplot2::ggplot()`

<br>

```{r, echo=TRUE, eval=FALSE}
?ggplot
```

![](img/ggplot_help.png)

## Data

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(data = penguins)
```

## Param√®tres esth√©tiques

<br>

#### = associer des variables √† des param√®tres esth√©tiques

<br>

-   positions (`x`, `y`)

-   couleurs (`color` ou `colour`, `fill`)

-   formes (`shape`, `linetype`)

-   taille (`size`)

-   transparence (`alpha`)

-   groupes (`group`)

## Param√®tres esth√©tiques

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(data = penguins) +
  aes(x = flipper_length_mm,
      y = bill_length_mm)
```

## Param√®tres esth√©tiques

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(
  data = penguins,
  mapping = aes(x = flipper_length_mm,
                y = bill_length_mm)
)
```

## Param√®tres esth√©tiques

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(
  penguins,
  aes(x = flipper_length_mm,
      y = bill_length_mm)
)
```

## Param√®tres esth√©tiques

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
penguins |> 
  ggplot(
    aes(x = flipper_length_mm,
        y = bill_length_mm)
  )
```

# Couches g√©om√©triques

## Geometries

#### = interpr√©ter les param√®tres esth√©tiques comme repr√©sentations graphiques

<br>

-   points

-   lignes

-   polygones

-   √©tiquettes de texte

-   ...

## Geometries

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(
  penguins,
  aes(x = flipper_length_mm,
      y = bill_length_mm)
  ) +
  geom_point()
```

## Propri√©t√©s visuelles des couches

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(
  penguins,
  aes(x = flipper_length_mm,
      y = bill_length_mm)
  ) +
  geom_point(
    color = "blue",
    alpha = 0.5,
    shape = "X",
    size = 4
  )
```

## Propri√©t√©s visuelles fixes ou mapp√©es

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = flipper_length_mm,
      y = bill_length_mm)
  ) +
  geom_point(
    color = "blue",
    alpha = 0.5
  )
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = flipper_length_mm,
      y = bill_length_mm)
  ) +
  geom_point(
    aes(color = species),
    alpha = 0.5
  )
```
:::
:::

## Mise en pratique - `aes()` et `geom_*()`

<br>

-   Cr√©ez un nuage de points en utilisant les variables suivantes :

    -   x = `bill_length_mm`

    -   y = `bill_depth_mm`

-   Testez diff√©rentes formes de points (valeurs num√©riques entre 0 et 21)

-   Testez diff√©rentes tailles de points

-   Mappez la variable `species` √† la couleur des points

-   Et mappez la variable `body_mass_g` √† la taille des points

## Mise en pratique - `aes()` et `geom_*()`

<br>

```{r}
#| echo: true
#| eval: true
#| output-location: column
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm)
  ) +
  geom_point()
```

## Mise en pratique - `aes()` et `geom_*()`

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm)
  ) +
  geom_point(shape = 5)
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm)
  ) +
  geom_point(shape = 21)
```
:::
:::

## Mise en pratique - `aes()` et `geom_*()`

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm)
  ) +
  geom_point(size = 0.5)
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm)
  ) +
  geom_point(size = 2)
```
:::
:::

## Mise en pratique - `aes()` et `geom_*()`

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm)
  ) +
  geom_point(aes(color = species))
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
ggplot(
  penguins,
  aes(x = bill_length_mm,
      y = bill_depth_mm)
  ) +
  geom_point(aes(color = species,
                 size = body_mass_g))
```
:::
:::

## `geom_point()`

<br>

L'argument `shape` peut prendre les valeurs suivantes :

![Source : [Albert's blog](https://blog.albertkuo.me/post/point-shape-options-in-ggplot/)](img/geom_point_shapes.png)

## `geom_point()`

<br>

Pour les formes 21 √† 25, deux √©l√©ments peuvent √™tre color√©s :

-   le contour (avec `color = ‚Ä¶`)

-   l'int√©rieur (avec `fill = ‚Ä¶`)

<br>

Pour ces formes, l'√©paisseur du contour peut √™tre modifi√©e avec l'argument `stroke = ‚Ä¶`

## `geom_point()`

<br>

::: columns
::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  slice(1:5) |> 
  ggplot(aes(x = bill_length_mm,
             y = bill_depth_mm)
         ) +
    geom_point(shape = 21,
               size = 8,
               color = "red",
               fill = "grey")
```
:::

::: {.column width="50%"}
```{r}
#| echo: true
#| eval: true
#| output-location: default
penguins |> 
  slice(1:5) |> 
  ggplot(aes(x = bill_length_mm,
             y = bill_depth_mm)
         ) +
    geom_point(shape = 21,
               size = 8,
               color = "red",
               fill = "grey",
               stroke = 3)
```
:::
:::
